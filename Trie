package quad;

import java.util.Set;

/**
 * Abstract class common to all classes implementing the trie structure. Defines methods required by those
 * classes and provides general methods for checking overlaps and computing distances.
 * This class corresponds to the <b>Component</b> in the <b>Composite</b> design pattern.
 * @author
 * @param <T> - type that extends interface HasPoint
 */

public abstract class Trie<T extends HasPoint> {
	static int capacityBucket;
	protected double topLeftX;
	protected double topLeftY;
	protected double bottomRightX;
	protected double bottomRightY;
	
	protected Trie(double topLeftX, double topLeftY, double bottomRightX, double bottomRightY) {
		this.topLeftX = topLeftX;
		this.topLeftY = topLeftY;
		this.bottomRightX = bottomRightX;
		this.bottomRightY = bottomRightY;
	}
	
	/**
	 * Get capacity of a bucket
	 * @return capacity
	 */
	
	public static int getCapacity() {
		return capacityBucket;
	}
	
	public static void setCapacity(int capacity) {
		capacityBucket = capacity;
	}
	
	/**
	 * Find a recorded point with the same coordinate of given point
	 * @param point - with requested coordinates
	 * @return point, if found; null otherwise
	 */
	
	abstract T find(T point);
	
	/**
	 * Insert given point
	 * @param point - to be inserted
	 * @return changed parent node
	 */
	
	abstract Trie<T> insert(T point);

	/**
	 * Insert given point, replacing existing points in same location
	 * @param point - point to be inserted
	 * @return changed parent node
	 */
	
	abstract Trie<T> insertReplace(T point);
	
	/**
	 * Collect points at a distance smaller or equal to radius from (x,y) and place them in given list
	 * @param x - coordinate of point
	 * @param y - coordinate of point
	 * @param radius - from given point
	 * @param points - set for collecting points	 */
	
	abstract void collectNear(double x, double y, double radius, Set<T> points);
	
	/**
	 * Collect all points in this node and its descendants in given set
	 * @param points - set of HasPoint for collection points
	 */
	
	abstract void collectAll(Set<T> points);
	
	/**
	 * Delete given point
	 * @param point - to delete
	 */
	
	abstract void delete(T point);
	
	boolean overlaps(double x, double y, double radius) {
		double distance = getDistance(this.topLeftX, this.topLeftY, x, y);
		if(distance <= radius) return true;
		return false;
	}
	
	@Override
	public String toString() {
		return "("+this.topLeftX+","+this.topLeftY+") ; ("+this.bottomRightX+","+this.bottomRightY+") ; "+capacityBucket+"";
	}
	
	/**
	 * Euclidean distance between two pair of coordinates of two points
	 * @param x1 - x coordinate of first point
	 * @param y1 - y coordinate of first point
	 * @param x2 - x coordinate of second point
	 * @param y2 - y coordinate of second point
	 * @return distance between given points
	 */
	
	public static double getDistance(double x1, double y1, double x2, double y2) {
		return Math.sqrt(Math.sqrt(x2-x1) + Math.sqrt(y2-y1));
	}
}
